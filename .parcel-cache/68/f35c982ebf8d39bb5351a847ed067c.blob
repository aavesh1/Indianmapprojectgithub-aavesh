require('ol/ol.css');
var _olInteractionDraw = require('ol/interaction/Draw');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _olInteractionDrawDefault = _parcelHelpers.interopDefault(_olInteractionDraw);
var _olMap = require('ol/Map');
var _olMapDefault = _parcelHelpers.interopDefault(_olMap);
var _olOverlay = require('ol/Overlay');
var _olOverlayDefault = _parcelHelpers.interopDefault(_olOverlay);
var _olView = require('ol/View');
var _olViewDefault = _parcelHelpers.interopDefault(_olView);
var _olStyle = require('ol/style');
var _olGeom = require('ol/geom');
var _olSource = require('ol/source');
var _olLayer = require('ol/layer');
var _olSphere = require('ol/sphere');
var _olObservable = require('ol/Observable');
const raster = new _olLayer.Tile({
  source: new _olSource.OSM()
});
const source = new _olSource.Vector();
const vector = new _olLayer.Vector({
  source: source,
  style: new _olStyle.Style({
    fill: new _olStyle.Fill({
      color: 'rgba(255, 255, 255, 0.2)'
    }),
    stroke: new _olStyle.Stroke({
      color: '#ffcc33',
      width: 2
    }),
    image: new _olStyle.Circle({
      radius: 7,
      fill: new _olStyle.Fill({
        color: '#ffcc33'
      })
    })
  })
});
/**
* Currently drawn feature.
* @type {import("../src/ol/Feature.js").default}
*/
let sketch;
/**
* The help tooltip element.
* @type {HTMLElement}
*/
let helpTooltipElement;
/**
* Overlay to show the help messages.
* @type {Overlay}
*/
let helpTooltip;
/**
* The measure tooltip element.
* @type {HTMLElement}
*/
let measureTooltipElement;
/**
* Overlay to show the measurement.
* @type {Overlay}
*/
let measureTooltip;
/**
* Message to show when the user is drawing a polygon.
* @type {string}
*/
const continuePolygonMsg = 'Click to continue drawing the polygon';
/**
* Message to show when the user is drawing a line.
* @type {string}
*/
const continueLineMsg = 'Click to continue drawing the line';
/**
* Handle pointer move.
* @param {import("../src/ol/MapBrowserEvent").default} evt The event.
*/
const pointerMoveHandler = function (evt) {
  if (evt.dragging) {
    return;
  }
  /** @type {string}*/
  let helpMsg = 'Click to start drawing';
  if (sketch) {
    const geom = sketch.getGeometry();
    if (geom instanceof _olGeom.Polygon) {
      helpMsg = continuePolygonMsg;
    } else if (geom instanceof _olGeom.LineString) {
      helpMsg = continueLineMsg;
    }
  }
  helpTooltipElement.innerHTML = helpMsg;
  helpTooltip.setPosition(evt.coordinate);
  helpTooltipElement.classList.remove('hidden');
};
const map = new _olMapDefault.default({
  layers: [raster, vector],
  target: 'map',
  view: new _olViewDefault.default({
    center: [9000000, 3000000],
    zoom: 1,
    extent: [7500000, 800000, 11000000, 4500000]
  })
});
map.on('pointermove', pointerMoveHandler);
map.getViewport().addEventListener('mouseout', function () {
  helpTooltipElement.classList.add('hidden');
});
const typeSelect = document.getElementById('type');
let draw;
// global so we can remove it later
/**
* Format length output.
* @param {LineString} line The line.
* @return {string} The formatted length.
*/
const formatLength = function (line) {
  const length = _olSphere.getLength(line);
  let output;
  if (length > 100) {
    output = Math.round(length / 1000 * 100) / 100 + ' ' + 'km';
  } else {
    output = Math.round(length * 100) / 100 + ' ' + 'm';
  }
  return output;
};
/**
* Format area output.
* @param {Polygon} polygon The polygon.
* @return {string} Formatted area.
*/
const formatArea = function (polygon) {
  const area = _olSphere.getArea(polygon);
  let output;
  if (area > 10000) {
    output = Math.round(area / 1000000 * 100) / 100 + ' ' + 'km<sup>2</sup>';
  } else {
    output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';
  }
  return output;
};
function addInteraction() {
  const type = typeSelect.value == 'area' ? 'Polygon' : 'LineString';
  draw = new _olInteractionDrawDefault.default({
    source: source,
    type: type,
    style: new _olStyle.Style({
      fill: new _olStyle.Fill({
        color: 'rgba(255, 255, 255, 0.2)'
      }),
      stroke: new _olStyle.Stroke({
        color: 'rgba(0, 0, 0, 0.5)',
        lineDash: [10, 10],
        width: 2
      }),
      image: new _olStyle.Circle({
        radius: 5,
        stroke: new _olStyle.Stroke({
          color: 'rgba(0, 0, 0, 0.7)'
        }),
        fill: new _olStyle.Fill({
          color: 'rgba(255, 255, 255, 0.2)'
        })
      })
    })
  });
  map.addInteraction(draw);
  createMeasureTooltip();
  createHelpTooltip();
  let listener;
  draw.on('drawstart', function (evt) {
    // set sketch
    sketch = evt.feature;
    /** @type {import("../src/ol/coordinate.js").Coordinate|undefined}*/
    let tooltipCoord = evt.coordinate;
    listener = sketch.getGeometry().on('change', function (evt) {
      const geom = evt.target;
      let output;
      if (geom instanceof _olGeom.Polygon) {
        output = formatArea(geom);
        tooltipCoord = geom.getInteriorPoint().getCoordinates();
      } else if (geom instanceof _olGeom.LineString) {
        output = formatLength(geom);
        tooltipCoord = geom.getLastCoordinate();
      }
      measureTooltipElement.innerHTML = output;
      measureTooltip.setPosition(tooltipCoord);
    });
  });
  draw.on('drawend', function () {
    measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';
    measureTooltip.setOffset([0, -7]);
    // unset sketch
    sketch = null;
    // unset tooltip so that a new one can be created
    measureTooltipElement = null;
    createMeasureTooltip();
    _olObservable.unByKey(listener);
  });
}
/**
* Creates a new help tooltip
*/
function createHelpTooltip() {
  if (helpTooltipElement) {
    helpTooltipElement.parentNode.removeChild(helpTooltipElement);
  }
  helpTooltipElement = document.createElement('div');
  helpTooltipElement.className = 'ol-tooltip hidden';
  helpTooltip = new _olOverlayDefault.default({
    element: helpTooltipElement,
    offset: [15, 0],
    positioning: 'center-left'
  });
  map.addOverlay(helpTooltip);
}
/**
* Creates a new measure tooltip
*/
function createMeasureTooltip() {
  if (measureTooltipElement) {
    measureTooltipElement.parentNode.removeChild(measureTooltipElement);
  }
  measureTooltipElement = document.createElement('div');
  measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';
  measureTooltip = new _olOverlayDefault.default({
    element: measureTooltipElement,
    offset: [0, -15],
    positioning: 'bottom-center',
    stopEvent: false,
    insertFirst: false
  });
  map.addOverlay(measureTooltip);
}
/**
* Let user change the geometry type.
*/
typeSelect.onchange = function () {
  map.removeInteraction(draw);
  addInteraction();
};
addInteraction();
