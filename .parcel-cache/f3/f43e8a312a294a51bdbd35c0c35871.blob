var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "unByKey", function () {
  return unByKey;
});
var _eventsTargetJs = require('./events/Target.js');
var _eventsTargetJsDefault = _parcelHelpers.interopDefault(_eventsTargetJs);
var _eventsEventTypeJs = require('./events/EventType.js');
var _eventsEventTypeJsDefault = _parcelHelpers.interopDefault(_eventsEventTypeJs);
var _eventsJs = require('./events.js');
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
/***
* @template {string} Type
* @template {Event|import("./events/Event.js").default} EventClass
* @template Return
* @typedef {(type: Type|Type[], listener: (event: EventClass) => ?) => Return} OnSignature
*/
/***
* @template {string} Type
* @template Return
* @typedef {(type: Type[], listener: (event: Event|import("./events/Event").default) => ?) => Return} CombinedOnSignature
*/
/***
* @typedef {import("./events").EventsKey|Array<import("./events").EventsKey>} OnReturn
*/
/**
* @typedef {'change'|'error'} EventTypes
*/
/**
* @classdesc
* Abstract base class; normally only used for creating subclasses and not
* instantiated in apps.
* An event target providing convenient methods for listener registration
* and unregistration. A generic `change` event is always available through
* {@link module:ol/Observable~Observable#changed}.
*
* @fires import("./events/Event.js").default
* @api
*/
var Observable = (function (_super) {
  __extends(Observable, _super);
  function Observable() {
    var _this = _super.call(this) || this;
    /***
    * @type {OnSignature<EventTypes, import("./events/Event.js").default, OnReturn>}
    */
    _this.on = _this.onInternal;
    /***
    * @type {OnSignature<EventTypes, import("./events/Event.js").default, OnReturn>}
    */
    _this.once = _this.onceInternal;
    /***
    * @type {OnSignature<EventTypes, import("./events/Event.js").default, void>}
    */
    _this.un = _this.unInternal;
    /**
    * @private
    * @type {number}
    */
    _this.revision_ = 0;
    return _this;
  }
  /**
  * Increases the revision counter and dispatches a 'change' event.
  * @api
  */
  Observable.prototype.changed = function () {
    ++this.revision_;
    this.dispatchEvent(_eventsEventTypeJsDefault.default.CHANGE);
  };
  /**
  * Get the version number for this object.  Each time the object is modified,
  * its version number will be incremented.
  * @return {number} Revision.
  * @api
  */
  Observable.prototype.getRevision = function () {
    return this.revision_;
  };
  /**
  * @param {string|Array<string>} type Type.
  * @param {function(?): ?} listener Listener.
  * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
  * @protected
  */
  Observable.prototype.onInternal = function (type, listener) {
    if (Array.isArray(type)) {
      var len = type.length;
      var keys = new Array(len);
      for (var i = 0; i < len; ++i) {
        keys[i] = _eventsJs.listen(this, type[i], listener);
      }
      return keys;
    } else {
      return _eventsJs.listen(this, type, listener);
    }
  };
  /**
  * @param {string|Array<string>} type Type.
  * @param {function(?): ?} listener Listener.
  * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
  * @protected
  */
  Observable.prototype.onceInternal = function (type, listener) {
    var key;
    if (Array.isArray(type)) {
      var len = type.length;
      key = new Array(len);
      for (var i = 0; i < len; ++i) {
        key[i] = _eventsJs.listenOnce(this, type[i], listener);
      }
    } else {
      key = _eventsJs.listenOnce(this, type, listener);
    }
    /** @type {Object}*/
    listener.ol_key = key;
    return key;
  };
  /**
  * Unlisten for a certain type of event.
  * @param {string|Array<string>} type Type.
  * @param {function(?): ?} listener Listener.
  * @protected
  */
  Observable.prototype.unInternal = function (type, listener) {
    var key = /** @type {Object}*/
    listener.ol_key;
    if (key) {
      unByKey(key);
    } else if (Array.isArray(type)) {
      for (var i = 0, ii = type.length; i < ii; ++i) {
        this.removeEventListener(type[i], listener);
      }
    } else {
      this.removeEventListener(type, listener);
    }
  };
  return Observable;
})(_eventsTargetJsDefault.default);
/**
* Listen for a certain type of event.
* @function
* @param {string|Array<string>} type The event type or array of event types.
* @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
* @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
*     called with an array of event types as the first argument, the return
*     will be an array of keys.
* @api
*/
Observable.prototype.on;
/**
* Listen once for a certain type of event.
* @function
* @param {string|Array<string>} type The event type or array of event types.
* @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
* @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
*     called with an array of event types as the first argument, the return
*     will be an array of keys.
* @api
*/
Observable.prototype.once;
/**
* Unlisten for a certain type of event.
* @function
* @param {string|Array<string>} type The event type or array of event types.
* @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
* @api
*/
Observable.prototype.un;
function unByKey(key) {
  if (Array.isArray(key)) {
    for (var i = 0, ii = key.length; i < ii; ++i) {
      _eventsJs.unlistenByKey(key[i]);
    }
  } else {
    _eventsJs.unlistenByKey(key);
  }
}
exports.default = Observable;
